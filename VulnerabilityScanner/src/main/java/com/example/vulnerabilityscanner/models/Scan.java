package com.example.vulnerabilityscanner.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.Generated;
import org.hibernate.annotations.GenerationTime;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Locale;

@Entity
@Table(name = "scans")
@EntityListeners(AuditingEntityListener.class)
@JsonIgnoreProperties(value = { "created_at", "updated_at" }, allowGetters = true)
public class Scan {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    private String title;

    private String type;

    private String tool;

    private String filePath;

    private String njsscanPath;

    private String insiderPath;

    private String lang;

    private String arachniUrl;

    private int arachniMinutes;

    private String niktoUrl;

    private int niktoMinutes;

    @Column(nullable = false, updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    @CreatedDate
    private Date created_at;

    public Scan() {}

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getTool() {
        return tool;
    }

    public void setTool(String tool) {
        this.tool = tool;
    }

    public String getFilePath() {
        return filePath;
    }

    public void setFilePath(String filePath) {
        this.filePath = filePath;
    }

    public Date getCreated_at() {
        return created_at;
    }

    public String getNjsscanPath() {
        return njsscanPath;
    }

    public void setNjsscanPath(String njsscanPath) {
        this.njsscanPath = njsscanPath;
    }

    public String getInsiderPath() {
        return insiderPath;
    }

    public void setInsiderPath(String insiderPath) {
        this.insiderPath = insiderPath;
    }

    public String getLang() {
        return lang;
    }

    public void setLang(String lang) {
        this.lang = lang;
    }

    public void setCreated_at(Date created_at) {
        this.created_at = created_at;
    }

    public String getArachniUrl() {
        return arachniUrl;
    }

    public void setArachniUrl(String arachniUrl) {
        this.arachniUrl = arachniUrl;
    }

    public int getArachniMinutes() {
        return arachniMinutes;
    }

    public void setArachniMinutes(int arachniMinutes) {
        this.arachniMinutes = arachniMinutes;
    }

    public String getNiktoUrl() {
        return niktoUrl;
    }

    public void setNiktoUrl(String niktoUrl) {
        this.niktoUrl = niktoUrl;
    }

    public int getNiktoMinutes() {
        return niktoMinutes;
    }

    public void setNiktoMinutes(int niktoMinutes) {
        this.niktoMinutes = niktoMinutes;
    }

    public String printNodeJsScan() {
        return "-> { title " + title + ", type: " + type + ", tool: " + tool + ", path:" + njsscanPath + "}";
    }

    public String printInsider() {
        return "-> { title " + title + ", tool: " + tool + ", path:" + insiderPath + ", lang: " + lang + "}";
    }

    public String printArachni() {
        return "-> { title " + title + ", tool: " + tool + ", url:" + arachniUrl + ", minutes: " + arachniMinutes + "}";
    }

    public String printNikto() {
        return "-> { title " + title + ", tool: " + tool + ", url:" + niktoUrl + ", minutes: " + niktoMinutes + "}";
    }

    public String createFilename() {
        int rand = (int)(Math.random()*(1000000-+2)+2);
        return title.strip().trim().toLowerCase(Locale.ROOT)+rand;
    }
}
