package com.example.vulnerabilityscanner.controllers;

import com.example.vulnerabilityscanner.StreamGobbler;
import com.example.vulnerabilityscanner.models.Scan;
import com.example.vulnerabilityscanner.repositories.ScanRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;
import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Executors;

@Controller
public class MainController {
    @Autowired
    private ScanRepository scanRepository;
    private ProcessBuilder builder = new ProcessBuilder();

    @GetMapping("/index")
    public ModelAndView index() {
        return new ModelAndView("index");
    }

    @GetMapping("/sast")
    public ModelAndView sastForm() {
        ModelAndView  m = new ModelAndView("sast");
        m.addObject("scan", new Scan());
        return m;
    }

    @PostMapping("/sast")
    public RedirectView saveSast(@ModelAttribute Scan scan) throws IOException, InterruptedException {
        scan.setType("SAST");
        String filename = scan.createFilename();
        if (scan.getTitle().equals("") || scan.getTool().equals("")) {
            return new RedirectView("/error");
        }
        if (scan.getTool().equals("Insider") && (scan.getInsiderPath().equals("") || scan.getLang().equals(""))) {
            return new RedirectView("/error");
        } else if (!scan.getTool().equals("NodejsScan")) {
            System.out.println(scan.printInsider());
            builder.command("sh", "-c", "cd $(pwd)/insider && ./insider --tech " + scan.getLang() +
                    " --target " + scan.getInsiderPath() + " &&" +
                    "zip " + filename + ".zip report-*.html report-*.json style.css && " +
                    "cp " + filename + ".zip ../src/main/resources/static/uploads/. && rm -rf *.json *.html *.css *.zip"
            );
        }

        if (scan.getTool().equals("NodeJsScan") && scan.getNjsscanPath().equals("")) {
            return new RedirectView("/error");
        } else if (!scan.getTool().equals("Insider")) {
            System.out.println(scan.printNodeJsScan());
            builder.command(
                    "sh", "-c", "nodejsscan --html --missing-controls -o test.html "
                    + scan.getNjsscanPath() + " && " +
                    "zip " + filename + ".zip test.html && " +
                    "cp -v " + filename + ".zip src/main/resources/static/uploads/. && rm -rf test.html "+filename+".zip"
            );
        }
        builder.directory(new File(System.getProperty("user.dir")));
        Process process = builder.start();
        StreamGobbler streamGobbler =
                new StreamGobbler(process.getInputStream(), System.out::println);
        Executors.newSingleThreadExecutor().submit(streamGobbler);
        int exitCode = process.waitFor();
        assert exitCode == 0;
        scan.setFilePath("/uploads/"+filename+".zip");
        scanRepository.save(scan);
        return new RedirectView("/scans");
    }

    @GetMapping("/dast")
    public ModelAndView dastForm() {
        ModelAndView s = new ModelAndView("dast");
        s.addObject("scan", new Scan());
        return s;
    }

    @PostMapping("/dast")
    public RedirectView saveDast(@ModelAttribute Scan scan) throws IOException, InterruptedException {
        if(scan.getTitle().equals("") || scan.getTool().equals("")) {
            return new RedirectView("/error");
        }

        int h = 0;
        int m = 0;
        int s = 0;
        String hs, ms, ss, time;
        scan.setType("DAST");
        String filename = scan.createFilename();

        if(scan.getTool().equals("Arachni") && (scan.getArachniUrl().equals("") || scan.getArachniMinutes() < 0)) {
            return new RedirectView("/error");
        } else if (!scan.getTool().equals("Nikto")) {
            System.out.println(scan.printArachni());
            if(scan.getArachniMinutes() >= 60) {
                h = scan.getArachniMinutes() / 60;
                m = scan.getArachniMinutes() % 60;
            } {
                m = scan.getArachniMinutes();
            }

            hs = (h > 9) ? h + "" : "0" + h;
            ms = (m > 9) ? m + "" : "0" + m;
            time = hs+":"+ms+":30";
            builder.command("sh", "-c", "cd $(pwd)/arachni && bin/arachni "+scan.getArachniUrl()+
                    " --timeout "+time+" &&" +
                    "bin/arachni_reporter *.afr --reporter=html:outfile="+filename+".zip && "+
                    "cp "+filename+".zip ../src/main/resources/static/uploads/. && rm -rf *.afr *.zip"
            );
        }

        if(scan.getTool().equals("Nikto") && (scan.getNiktoUrl().equals("") || scan.getNiktoMinutes() < 0)) {
            return new RedirectView("/error");
        } else if (!scan.getTool().equals("Arachni")){
            System.out.println(scan.printNikto());
            s = scan.getNiktoMinutes() * 60;
            builder.command("sh", "-c", "cd $(pwd)/nikto/program && perl nikto.pl -h "+scan.getNiktoUrl()+
                    " -maxtime "+s+"s -S .");
        }
        builder.directory(new File(System.getProperty("user.dir")));
        Process process = builder.start();
        StreamGobbler streamGobbler =
                new StreamGobbler(process.getInputStream(), System.out::println);
        Executors.newSingleThreadExecutor().submit(streamGobbler);
        int exitCode = process.waitFor();
        assert exitCode == 0;
        if(!scan.getTool().equals("Arachni")) {
            builder.command("sh", "-c", "cd $(pwd)/nikto/program && zip "+filename+".zip savedir_*/* && ls && cp "+filename+
                    ".zip ../../src/main/resources/static/uploads/. && rm -rf savedir_* *.zip");
            builder.directory(new File(System.getProperty("user.dir")));
            Process process2 = builder.start();
            StreamGobbler streamGobbler2 =
                    new StreamGobbler(process2.getInputStream(), System.out::println);
            Executors.newSingleThreadExecutor().submit(streamGobbler2);
            int exitCode2 = process2.waitFor();
            assert exitCode2 == 0;
        }
        scan.setFilePath("/uploads/"+filename+".zip");
        scanRepository.save(scan);
        return new RedirectView("/scans");
    }

    @GetMapping("/scans")
    public ModelAndView scans() {
        List<Scan> scans = scanRepository.findAll();
        Collections.sort(scans, new Comparator<Scan>() {
            @Override
            public int compare(Scan s1, Scan s2) {
                return s2.getId().compareTo(s1.getId());
            }
        });
        ModelAndView m = new ModelAndView("scans");
        m.addObject("scans", scans);
        return m;
    }

    @GetMapping("/error")
    public ModelAndView error() {
        return new ModelAndView("error");
    }
}
